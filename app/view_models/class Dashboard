class Dashboard
  def initialize(user)
    @user = user
  end

  def active_tickets
    public_send("#{@user.role}_active_tickets")
  end

  def employee_active_tickets
    @unit = UsersUnitsRelationship.find_by(user_id: user.id).unit
    @unit.tickets.most_recent.decorate
  end

  def staff_member_active_tickets
    @units = Unit.where(responsible_user_id: user.id)
    @tickets = Ticket.where(unit_id: @units).decorate
  end

  def employee_count
    user.company.employees.count
  end

  def staff_count 
    user.company.staff.count
  end

  private

  attr_reader :user
end




class Company
  class DashboardsController < Company::BaseController
    def show
      @dashboard = Dashboard.new(current_user)
    end
  end
end

  has_many :employees, -> { where(role: 'employee') },
           source: :user, through: :users_companies_relationships




- provide(:headline, "Howdy, #{current_user.first_name}!")

.row
  .col-xl-12
    .dashboard-box
      .headline
        - if current_user.employee?
          .d-flex.justify-content-between
            h3
              i.icon-material-outline-library-books
              | Active tickets   
          .content.padding-bottom-20
            ul.dashboard-box-list
              = render @dashboard.active_tickets

        - elsif current_user.company_owner?
          .d-flex.justify-content-between
            h3
              i.icon-material-outline-library-books
              | I am company owner 
          .content.padding-top-20
            | Employee count
            '
            = @dashboard.employee_count
          .content.padding-bottom-20
            | Staff count
            '
            = @dashboard.staff_count
        - else
          .d-flex.justify-content-between
            h3
              i.icon-material-outline-library-books
              | Assigned tickets   
          .content.padding-bottom-20
            ul.dashboard-box-list
              = render @dashboard.active_tickets





class TicketMailerPreview < ActionMailer::Preview
  def new_ticket_email
    # company = FactoryBot.build(:company)
    # unit_with_responsible_user = FactoryBot.build(:unit, :with_responsible_user,
    #                                               company: company)
    # employee = unit_with_responsible_user.users.last
    # ticket = FactoryBot.create(:ticket, unit: unit_with_responsible_user, user: employee)

    ticket = Ticket.all.detect { |t| t.unit.responsible_user.present? }
    TicketMailer.new_ticket_email(ticket)
  end

  def assign_responsible_user_email
    # company = FactoryBot.create(:company)
    # unit = FactoryBot.create(:unit, :with_employee_and_ticket, company: company)
    # employee = unit.users.first
    # ticket = FactoryBot.create(:ticket, unit: unit, user: employee)
    ticket = Ticket.all.detect { |t| t.unit.responsible_user.nil? }
    TicketMailer.assign_responsible_user_email(ticket)
  end
end